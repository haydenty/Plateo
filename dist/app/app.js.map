{"version":3,"sources":["app.module.js","app.constants.js","app.routes.js","app.run.js","components/home/home.js","components/plate/plate.js","components/search/plateSearch.js","components/services/plateService.js","components/services/userService.js","components/myPlates/myPlates.js","shared/login/auth.factory.js","shared/login/login.js","shared/register/register.js"],"names":["plateoApp","angular","module","constant","apis","plateoApiBaseUrl","config","$routeProvider","$httpProvider","interceptors","push","when","templateUrl","controller","access","requiredLogin","run","$rootScope","$window","$location","AuthenticationFactory","check","$on","event","nextRoute","currentRoute","isLogged","path","user","sessionStorage","userRole","showMenu","role","$scope","UserAuthFactory","vm","isActive","route","logout","plateService","comments","initialize","plate","getPlateToShow","getCommentsPromise","getComments","then","response","alert","JSON","stringify","follow","addComment","newComment","comment","addCommentPromise","states","name","abbreviation","selectedState","searchComplete","search","plateNum","enteredPlateNumber","state","searchPlatePromise","searchPlates","searchResultPlates","length","plateClicked","plateChoosen","service","$resource","constants","$q","$http","userService","baseUrl","plateToShow","console","log","method","url","data","userId","_id","plateId","createDateTime","Date","get","getMyPlates","username","currentUser","setCurrentUser","getCurrentUser","getMyPlatesPromise","myPlates","factory","auth","localStorage","token","this","parse","login","password","post","expires","register","firstname","lastname","email","verifyPassword","request","headers","getItem","verifypassword","errorMessage","keyPress","keyCode","success","error","status","message","undefined"],"mappings":"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","file":"app.js","sourcesContent":["var plateoApp = angular.module('plateoApp', ['ngRoute']);\n","plateoApp.constant('constants',{\n    \"apis\" : {\n      \"plateoApiBaseUrl\" : \"http://localhost:3000/\" //local\n      // \"plateoApiBaseUrl\" : \"http://45.55.190.133:3000/\" //PROD\n    }\n});\n","plateoApp.config(['$routeProvider', '$httpProvider', function($routeProvider, $httpProvider) {\n    $httpProvider.interceptors.push('TokenInterceptor');\n    $routeProvider\n        .when('/', {\n            templateUrl: 'app/components/home/home.html',\n            controller: 'mainController',\n            access: {\n                requiredLogin: false\n            }\n        })\n        .when('/plateSearch', {\n            templateUrl: 'app/components/search/plateSearch.html',\n            controller: 'searchController',\n            access: {\n                requiredLogin: false\n            }\n        })\n        .when('/myPlates', { //TODO: this requires login, other views that have follow buttons should use ng-if=\"loggedIn\"\n            templateUrl: 'app/components/myPlates/myPlates.html',\n            controller: 'myPlatesController',\n            access: {\n                requiredLogin: true\n            }\n        })\n        .when('/plate', { //TODO: pass plate obj as parameter\n          templateUrl: 'app/components/plate/plate.html',\n          controller: 'plateController',\n          access: {\n              requiredLogin: false\n          }\n      })\n      .when('/login', {\n            templateUrl: 'app/shared/login/login.html',\n            controller: 'loginController',\n            access: {\n                requiredLogin: false\n            }\n        })\n        .when('/register', {\n            templateUrl: 'app/shared/register/register.html',\n            controller: 'loginController', //TODO: split controllers\n            access: {\n                requiredLogin: false\n            }\n        })\n}]);\n","plateoApp.run(['$rootScope', '$window', '$location', 'AuthenticationFactory', function ($rootScope, $window, $location, AuthenticationFactory) {\n    // when the page refreshes, check if the user is already logged in\n    AuthenticationFactory.check();\n\n    $rootScope.$on(\"$routeChangeStart\", function (event, nextRoute, currentRoute) {\n        if ((nextRoute.access && nextRoute.access.requiredLogin) && !AuthenticationFactory.isLogged) {\n            $location.path(\"/login\");\n        } else {\n            // check if user object exists else fetch it. This is incase of a page refresh\n            if (!AuthenticationFactory.user) AuthenticationFactory.user = $window.sessionStorage.user;\n            if (!AuthenticationFactory.userRole) AuthenticationFactory.userRole = $window.sessionStorage.userRole;\n        }\n    });\n\n    $rootScope.$on('$routeChangeSuccess', function (event, nextRoute, currentRoute) {\n        $rootScope.showMenu = AuthenticationFactory.isLogged;\n        $rootScope.role = AuthenticationFactory.userRole;\n        // if the user is already logged in, take him to the home page\n        if (AuthenticationFactory.isLogged == true && $location.path() == '/login') {\n            $location.path('/');\n        }\n    }); \n}]);\n","plateoApp.controller('mainController', ['$scope', '$location', 'UserAuthFactory', function($scope, $location, UserAuthFactory) {\n    var vm = $scope;\n    vm.isActive = function (route) {\n            return route === $location.path();\n        };\n\n    vm.logout = function () {\n        UserAuthFactory.logout();\n    };\n}]);\n","plateoApp.controller('plateController', ['$scope', 'plateService', function($scope, plateService) {\n    var vm = $scope;\n    vm.comments = [];\n    vm.initialize = function() {\n        vm.plate = plateService.getPlateToShow(); //NOTE: no promises needed because it doesn't call api\n        var getCommentsPromise = plateService.getComments();\n        getCommentsPromise.then(function(response){\n            vm.comments = response;\n        }, function(response){\n          alert('Error happened getting comments: ', JSON.stringify(response));//TODO: appropriate error handling toastr, maybe\n        });\n    }\n    vm.follow = function() {\n        plateService.follow().then(function(response) {}, function(response) {\n            alert('Error occurred trying to follow plate: ', JSON.stringify(response)); //TODO: handle error appro.\n        });\n    };\n    vm.addComment = function() {\n      if(vm.newComment !== ''){\n        const plate = vm.plate;\n        const comment = vm.newComment;\n\n        var addCommentPromise = plateService.addComment(comment);\n        addCommentPromise.then(function(response) {\n        //   var getCommentsPromise = plateService.getComments();\n        //   getCommentsPromise.then(function(response){\n        //       vm.comments = response;\n        //   }, function(response){\n        //     alert('Error happened getting comments: ', JSON.stringify(response));//TODO: appropriate error handling toastr, maybe\n        //   });\n        //     vm.newComment = \"\";\n        // }, function(response) {\n        //     alert('Error happened adding comment on plate: ', JSON.stringify(response)); //TODO: appropriate error handling toastr, maybe\n        // });\n        vm.newComment=\"\";\n      });\n      }\n    }\n    vm.initialize();\n}]);\n","plateoApp.controller('searchController', ['$scope', '$location', 'plateService', function ($scope, $location, plateService) {\n    var vm = $scope;\n    vm.states = [\n        { name: 'ALABAMA', abbreviation: 'AL'},\n        { name: 'ALASKA', abbreviation: 'AK'},\n        { name: 'AMERICAN SAMOA', abbreviation: 'AS'},\n        { name: 'ARIZONA', abbreviation: 'AZ'},\n        { name: 'ARKANSAS', abbreviation: 'AR'},\n        { name: 'CALIFORNIA', abbreviation: 'CA'},\n        { name: 'COLORADO', abbreviation: 'CO'},\n        { name: 'CONNECTICUT', abbreviation: 'CT'},\n        { name: 'DELAWARE', abbreviation: 'DE'},\n        { name: 'DISTRICT OF COLUMBIA', abbreviation: 'DC'},\n        { name: 'FEDERATED STATES OF MICRONESIA', abbreviation: 'FM'},\n        { name: 'FLORIDA', abbreviation: 'FL'},\n        { name: 'GEORGIA', abbreviation: 'GA'},\n        { name: 'GUAM', abbreviation: 'GU'},\n        { name: 'HAWAII', abbreviation: 'HI'},\n        { name: 'IDAHO', abbreviation: 'ID'},\n        { name: 'ILLINOIS', abbreviation: 'IL'},\n        { name: 'INDIANA', abbreviation: 'IN'},\n        { name: 'IOWA', abbreviation: 'IA'},\n        { name: 'KANSAS', abbreviation: 'KS'},\n        { name: 'KENTUCKY', abbreviation: 'KY'},\n        { name: 'LOUISIANA', abbreviation: 'LA'},\n        { name: 'MAINE', abbreviation: 'ME'},\n        { name: 'MARSHALL ISLANDS', abbreviation: 'MH'},\n        { name: 'MARYLAND', abbreviation: 'MD'},\n        { name: 'MASSACHUSETTS', abbreviation: 'MA'},\n        { name: 'MICHIGAN', abbreviation: 'MI'},\n        { name: 'MINNESOTA', abbreviation: 'MN'},\n        { name: 'MISSISSIPPI', abbreviation: 'MS'},\n        { name: 'MISSOURI', abbreviation: 'MO'},\n        { name: 'MONTANA', abbreviation: 'MT'},\n        { name: 'NEBRASKA', abbreviation: 'NE'},\n        { name: 'NEVADA', abbreviation: 'NV'},\n        { name: 'NEW HAMPSHIRE', abbreviation: 'NH'},\n        { name: 'NEW JERSEY', abbreviation: 'NJ'},\n        { name: 'NEW MEXICO', abbreviation: 'NM'},\n        { name: 'NEW YORK', abbreviation: 'NY'},\n        { name: 'NORTH CAROLINA', abbreviation: 'NC'},\n        { name: 'NORTH DAKOTA', abbreviation: 'ND'},\n        { name: 'NORTHERN MARIANA ISLANDS', abbreviation: 'MP'},\n        { name: 'OHIO', abbreviation: 'OH'},\n        { name: 'OKLAHOMA', abbreviation: 'OK'},\n        { name: 'OREGON', abbreviation: 'OR'},\n        { name: 'PALAU', abbreviation: 'PW'},\n        { name: 'PENNSYLVANIA', abbreviation: 'PA'},\n        { name: 'PUERTO RICO', abbreviation: 'PR'},\n        { name: 'RHODE ISLAND', abbreviation: 'RI'},\n        { name: 'SOUTH CAROLINA', abbreviation: 'SC'},\n        { name: 'SOUTH DAKOTA', abbreviation: 'SD'},\n        { name: 'TENNESSEE', abbreviation: 'TN'},\n        { name: 'TEXAS', abbreviation: 'TX'},\n        { name: 'UTAH', abbreviation: 'UT'},\n        { name: 'VERMONT', abbreviation: 'VT'},\n        { name: 'VIRGIN ISLANDS', abbreviation: 'VI'},\n        { name: 'VIRGINIA', abbreviation: 'VA'},\n        { name: 'WASHINGTON', abbreviation: 'WA'},\n        { name: 'WEST VIRGINIA', abbreviation: 'WV'},\n        { name: 'WISCONSIN', abbreviation: 'WI'},\n        { name: 'WYOMING', abbreviation: 'WY' }\n    ];\n    vm.selectedState = vm.states[0];\n    vm.searchComplete = false;\n    vm.search = function(){\n      vm.searchComplete = false;\n      const plateNum = vm.enteredPlateNumber;\n      const state = vm.selectedState;\n\n      var searchPlatePromise = plateService.searchPlates(plateNum, state);\n      searchPlatePromise.then(function(response){\n          vm.searchResultPlates = response;\n          if(vm.searchResultPlates.length === 0)//Adding plate if doesn't exist\n              vm.searchComplete = true;\n      }, function(response){\n         alert('Error occured while searching for plate: ', JSON.stringify(response));\n      });\n    };\n\n    vm.plateClicked = function(plate){\n      plateService.plateChoosen(plate); //NOTE: no promise needed just passing data between controllers\n      $location.path('plate');\n    };\n}]);\n","plateoApp.service('plateService2', ['$resource', 'constants', 'AuthenticationFactory', function($resource, constants, AuthenticationFactory) {\n  return $resource({\n\n  });\n}]);\n\n\n\nplateoApp.service('plateService', ['$q', '$http', 'constants', 'userService', 'AuthenticationFactory', function($q, $http, constants, userService, AuthenticationFactory) {\n  var baseUrl = constants.apis.plateoApiBaseUrl;\n  var plateToShow = {}; //FIXME: Check to see if this is good practice to share across controllers, if not remove all references(getter, setter)\n    return {\n        plateChoosen: function(plate) {\n            console.log('setting plate', plate);\n            plateToShow = plate;\n        },\n        getPlateToShow: function() {\n            return plateToShow;\n        },\n        follow: function() {\n          return $http({\n              method: 'POST',\n              url: baseUrl + 'api/v1/plates/follow',\n              data: {\n                  userId: AuthenticationFactory.user._id,\n                  plateId: plateToShow._id,\n                  createDateTime : new Date()\n              }\n          }).then(function success(response) {\n              return response;\n          });\n        },\n        searchPlates: function(plateNum, state) { //TODO: Search Functionality\n            return $http.get(baseUrl + \"plates\").then(function(response) {\n                return response.data;\n            });\n        },\n        getMyPlates: function() {\n          return $http.get(baseUrl + 'api/v1/plates/' + AuthenticationFactory.user._id).then(function(response){return response;});\n        },\n        getComments: function() {\n           return $http.get(baseUrl + \"comments/\" + plateToShow._id).then(function(response) {\n              return response.data;\n          });\n        },\n        addComment: function(comment) {\n          return $http({\n              method: 'POST',\n              url: baseUrl + 'api/v1/plates/comment',\n              data: {\n                  plateId: plateToShow._id,\n                  comment : comment,\n                  user: {\n                      userId: AuthenticationFactory.user._id,\n                      username: AuthenticationFactory.user.username\n                  },\n                  createDateTime : new Date()\n              }\n          }).then(function success(response) {\n              return response;\n          });\n        }\n    };\n}]);\n","plateoApp.service('userService', function() {\n    var currentUser; //FIXME: Check to see if this is good practice to share across controllers, if not remove all references(getter, setter)\n    return {\n        setCurrentUser: function(user) {\n            currentUser = user;\n        },\n        getCurrentUser: function() {\n            return currentUser;\n        }\n    };\n});\n","plateoApp.controller('myPlatesController', ['$scope', '$location', 'plateService', function($scope, $location, plateService) {\n    var vm = $scope;\n    vm.plateClicked = function(plate) {\n        plateService.plateChoosen(plate); //NOTE: no promise needed, just passing data between controllers\n        $location.path('plate');\n    };\n\n    var getMyPlatesPromise = plateService.getMyPlates();\n    getMyPlatesPromise.then(function(response) {\n      if(response.data){\n        vm.myPlates = response.data;\n      }\n      else{\n        vm.myPlates = [];\n      }\n    }, function(response) {\n        alert('Error happened getting my plates: ', JSON.stringify(response)); //TODO: appropriate error handling toastr, maybe\n    });\n}]);\n","plateoApp.factory('AuthenticationFactory', ['$window', function ($window) {\n    var auth = {\n        isLogged: false,\n        check: function () {\n          console.log('Checking the magic!');\n            if ($window.localStorage.token && $window.localStorage.user) {\n                this.isLogged = true;\n                this.user = JSON.parse($window.localStorage.user);\n            } else {\n                this.isLogged = false;\n                delete this.user;\n            }\n        }\n    }\n    return auth;\n}]);\n\nplateoApp.factory('UserAuthFactory', ['$window', '$location', '$http', 'constants', 'AuthenticationFactory', function ($window, $location, $http, constants, AuthenticationFactory) {\n  var baseUrl = constants.apis.plateoApiBaseUrl;\n    return {\n        login: function (username, password) {\n            return $http.post(baseUrl + 'login', {\n                username: username,\n                password: password\n            });\n        },\n        logout: function () {\n            if (AuthenticationFactory.isLogged) {\n                AuthenticationFactory.isLogged = false;\n                delete AuthenticationFactory.user;\n                delete AuthenticationFactory.userRole;\n                delete $window.localStorage.token;\n                delete $window.localStorage.expires;\n                delete $window.localStorage.user;\n                delete $window.localStorage.userRole;\n\n                $location.path(\"/login\");\n            }\n        },\n        register: function (firstname, lastname, email, username, password) { //TODO: create user object to pass not individual attributes\n            return $http.post(baseUrl + 'register', {\n                firstname: firstname,\n                lastname: lastname,\n                email: email,\n                username: username,\n                password: password,\n                verifyPassword: password\n            });\n        }\n    }\n}]);\nplateoApp.factory('TokenInterceptor', ['$q', '$window', function ($q, $window) {\n    return {\n        request: function (config) {\n            config.headers = config.headers || {};\n            // Set the headers for auth based endpoints\n            if ($window.localStorage.token) {\n                config.headers['X-Access-Token'] = JSON.parse(localStorage.getItem('token')),\n                config.headers['Expires'] = localStorage.getItem('expires'),\n                config.headers['Content-Type'] = \"application/json\";\n            }\n            return config || $q.when(config);\n        },\n        response: function (response) {\n            return response || $q.when(response);\n        }\n    };\n}]);\n","plateoApp.controller('loginController', ['$scope', '$window', '$location', 'UserAuthFactory', 'AuthenticationFactory', 'userService', function($scope, $window, $location, UserAuthFactory, AuthenticationFactory, userService) {\n      $scope.user = {\n          username: '',\n          password: '', //pass123 - bobmarley\n          verifypassword: '',\n          email: '',\n          firstname: '',\n          lastname: ''\n      };\n      $scope.errorMessage = '';\n      $scope.keyPress = function (keyCode) {\n          if (keyCode == 13)\n              $scope.login();\n      };\n      $scope.login = function () {\n\n          var username = $scope.user.username,\n              password = $scope.user.password;\n          $scope.errorMessage = ''; //clears the error message when they go to try for second time\n\n          if (username !== '' && password !== '') {\n              UserAuthFactory.login(username, password).success(function (data) {\n\n                  AuthenticationFactory.isLogged = true;\n                  AuthenticationFactory.user = data.user;\n                  AuthenticationFactory.userRole = data.user.role;\n\n                  $window.localStorage.token = JSON.stringify(data.token); // set the token into local storage\n                  $window.localStorage.expires = data.expires; // set the time to expirer into local storage\n                  $window.localStorage.user = JSON.stringify(data.user); // to fetch the user details on refresh\n                  $window.localStorage.userRole = data.user.role; // to fetch the user details on refresh\n                  userService.setCurrentUser(data.user);\n                  $location.path(\"/plateSearch\");\n\n              }).error(function (status) {\n                  if (status.message == \"Invalid credentials!!\") {\n                      $scope.errorMessage = \"Looks like we couldn't find a username associated with that password, please try again.\";\n                  } else{\n                      $scope.errorMessage = status.message;\n                    }\n              });\n          } else {\n              if (password == '' && username !== '')\n                  $scope.errorMessage = 'Make sure to enter your password';\n              else if (username == '' && password !== '')\n                  $scope.errorMessage = 'Make sure to enter your username';\n          }\n\n      };\n\n      $scope.register = function () {\n          var username = $scope.user.username,\n              password = $scope.user.password,\n              verifyPassword = $scope.user.verifypassword,\n              email = $scope.user.email,\n              firstname = $scope.user.firstname,\n              lastname = $scope.user.lastname;\n\n          $scope.errorMessage = ''; //clears the error message when they go to try for second time\n\n          if (password == verifyPassword) {\n              if (username !== '' && password !== '' && firstname !== '' && lastname !== '' && email !== undefined) {\n                  UserAuthFactory.register(firstname, lastname, email, username, password).success(function (data) {\n                      $scope.login();\n                  }).error(function (status) {\n                      $scope.errorMessage = 'Oops look like we messed something up, please try again ';\n                      if (status !== null) {\n                        $scope.errorMessage += status.message;\n                      }\n                  });\n              } else {\n                  $scope.errorMessage = 'Make sure to fill everything in, cheers!';\n              }\n          } else {\n              $scope.errorMessage = \"Passwords don't match, please try again\";\n          }\n      };\n}]);\n","plateoApp.controller('registerController', ['$scope', function($scope) {\n    var vm = $scope;\n}]);\n"],"sourceRoot":"/source/"}